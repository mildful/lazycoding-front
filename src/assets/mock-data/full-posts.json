[
  {
    "id": 38,
    "date": "2016-09-18T10:12:06",
    "date_gmt": "2016-09-18T10:12:06",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=38"
    },
    "modified": "2016-09-18T10:12:06",
    "modified_gmt": "2016-09-18T10:12:06",
    "slug": "test",
    "type": "post",
    "link": "http://localhost/lazycoding-back/test/",
    "title": {
      "rendered": "test"
    },
    "content": {
      "rendered": "<h2>A l&#8217;intérieur du navigateur</h2>\n<h3>Introduction</h3>\n<p>Tout le monde sait ce qu&#8217;est un navigateur web (sauf ma mère) mais moins de personnes savent comment ça marche. Étant développeur web je trouvais contradictoire de passer mes journées sur Chrome sans en savoir plus sur leur fonctionnement.</p>\n<p>Cet article à pour but d&#8217;éclaircir un peu ces boites noires.</p>\n<blockquote><p>\n  <em>Cet article a été grandement inspiré par l&#8217;impressionnant <a href=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork\">travail réalisé par Tali Garsiel</a>. Il existe de nombreuses ressources sur le web qui vont plus en profondeur. Le but de ce post est de vous offrir un aperçu accessible et en français du fonctionnement d&#8217;un navigateur.</em>\n</p></blockquote>\n<h3>Les composants d&#8217;un navigateur</h3>\n<p>On va commencer par la base et se demander ce qu&#8217;est un navigateur web.</p>\n<p>Un navigateur web, ce n&#8217;est rien de plus qu&#8217;un programme dont le rôle est de communiquer et d&#8217;afficher les données du web. Comme tous les programmes, il est composé de plusieurs couches :</p>\n<ul>\n<li><strong>User interface</strong>: C&#8217;est plutôt parlant, il s&#8217;agit de la couche graphique de votre navigateur (barre de recherche, favoris, boutons&#8230;).</li>\n<li><strong>Browser engine</strong>: C&#8217;est le moteur de navigateur, un controller qui va faire le lien entre l&#8217;interface et le moteur de rendu / la gestion de données.</li>\n<li><strong>Rendering engine</strong>: Quand on parle du loup le voilà, son rôle est&#8230; D&#8217;afficher ce qui a été requêté !</li>\n<li><strong>UI backend</strong>: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.</li>\n<li><strong>JS interpreter</strong>: Il s&#8217;occupe de parser et d&#8217;éxecuter le  javascript.</li>\n<li><strong>Data storage</strong>: Une suite d&#8217;outils permettant de faire persister des données dans la navigateur. Vous connaissez ces outils, ce sont les cookies, le localStorage, IndexedDB, WebSQL et le FileSystem.</li>\n</ul>\n<blockquote><p>\n  Ce n&#8217;est pas le cas de tous les navigateurs. Selon <a href=\"https://fr.wikipedia.org/wiki/Navigateur_web\">Wikipédia</a>, un navigateur web est par définition au minimum un client HTTP. Lorsque je parle de navigateur web, je parle des navigateurs qui dominent le marché (Chrome, FF, Edge etc).\n</p></blockquote>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/layers.png\" alt=\"browser components\" /></p>\n<h3>Le rendering engine</h3>\n<p>Nous allons passer très vite sur cette partie. Sache qu&#8217;il existe de nombreux moteurs différents, les plus connus étant:</p>\n<ul>\n<li><em>Trident</em>, utilisé par IE.</li>\n<li><em>Gecko</em>, utilisé par FF.</li>\n<li><em>Webkit</em>, utilisé par Safara. Notez qu&#8217;il est open-source !</li>\n<li><em>Blink</em>, un fork de Webkit utilisé par Chrome et Opera.</li>\n<li><em>EdgeHTML</em>, utilisé par Edge. C&#8217;est un fork de Trident. EdgeHTML n&#8217;a pas été créé spécialement pour Edge, il date d&#8217;une Technical Preview de Windows 10 dans laquelle il était intégré à IE11.</li>\n</ul>\n<p>EdgeHTML est plus performant que Trident et un ménage a été fait en ce qui concerne le code spécifique à IE. De plus, couplé à Chakra (voir ci-dessous), il aurait des performances équivalentes à Chrome et serait bien plus rapide avec le WebGL que Chrome et Firefox.</p>\n<h3>JS engine</h3>\n<p>Nous allons aussi faire un rapide tour des principaux moteurs JS en commençant par le premier jamais créé: <em>SpiderMonkey</em>, par <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> à Netscape.</p>\n<p>Il y a également le <em>V8</em>. Tu en as sûrement entendu parlé, c&#8217;est le JS engine de Chrome qui est également très connu pour être utilisé par NodeJS pour interpréter le javascript.</p>\n<p>IE et Edge utilisent <em>Chakra</em>. Bien que le nom du moteur soit le même pour IE et pour Edge, il y a bien deux moteurs différents. Sur IE, on parle plus précisément du JScript engine. Le Chakra utilisé par Edge est un fork du JScript engine. Note qu&#8217;un <a href=\"https://github.com/nodejs/node-chakracore\">projet</a> est en cours de développement pour permettre à Node d&#8217;utiliser ChakraCore (le cœur de Chakra) au lieu du V8.</p>\n<h3>Et comment qu&#8217;on affiche des choses ?</h3>\n<p>Maintenant qu&#8217;on a fait un tour rapide du propriétaire, on va s&#8217;attarder sur le fonctionnement du moteur de rendu. Pourquoi celui-ci ? Car c&#8217;est un sujet qui va t’intéresser si tu fais un peu de front. Si tu as déjà regardé l&#8217;onglet &#8216;Profiles&#8217; de Chrome et que tu as eu peur en voyant toutes les données, tu devrais être un peu plus à l&#8217;aise après avoir lu cet article. <em>Enfin j&#8217;espère</em>.</p>\n<p>Assez papoter, les choses sérieuses comment !</p>\n<p>Une fois que le moteur de rendu à reçu des données provenant de la couche réseau, son travail se décompose en quatre étapes que nous allons détailler : Parser le HTML et le CSS, construire le <code>render tree</code>,  l&#8217;étape de layout et enfin, l&#8217;étape de painting.</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png\" alt=\"Webkit main flow\" /></p>\n<blockquote><p>\n  Tu remarques que j&#8217;utilise pas mal de vocabulaire anglais. Ce n&#8217;est pas par admiration pour JCVD, c&#8217;est simplement que c&#8217;est dans cet langue là qu&#8217;on parlera. Je n&#8217;ai pas encore rencontré de personne qui me parle &#8220;d&#8217;étape de peinture&#8221;.\n</p></blockquote>\n<h4>Parsing</h4>\n<p>Avant de traiter les données HTML et CSS pour afficher de belles choses, il faut traiter le code pour le rendre plus compréhensible par le navigateur. C&#8217;est le parsing. On va transformer notre document HTML en un arbre que tu connais bien : le <a href=\"https://www.w3.org/TR/DOM-Level-2-Core/introduction.html\">DOM</a> (<em>Document Object Model</em>). On fait de même avec le CSS et ce qui en résulte s&#8217;appelle le <a href=\"https://www.w3.org/TR/cssom-1/\">CSSOM</a> (<em>CSS Object Model</em>).</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Hello World\n    &lt;/p&gt;\n    &lt;div&gt;&lt;img src=\"example.png\"/&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>On peut représenter le DOM (comme le CSSOM) sous la forme d&#8217;un arbre. Pour l&#8217;exemple ci-dessus, tu aurais cette représentation :</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/image015.png\" alt=\"enter image description here\" /></p>\n<p>++ parler de la spécificité CSS là ?</p>\n<h4>Construction du render tree</h4>\n<p>Une fois qu&#8217;on a notre DOM et notre CSSOM, le navigateur va les <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en\">fusionner</a> pour obtenir  un <strong>render tree</strong>.</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png\" alt=\"enter image description here\" /></p>\n<p>Fusionner c&#8217;est un peu vague alors on va grossièrement voir ce qui fait le navigateur :</p>\n<h2>====================================================</h2>\n<p>Plusieurs moteurs : Trident (IE), Gecko (FF), Webkit (Safari), Blink &#8211; fork de Webkit et open source(Chrome et Opera), EdgeHTML &#8211; fork de Trident (Edge) (qui date d&#8217;une Tecnical preview de Win10 dans IE11).</p>\n<p><em>note: EdgeHTML est plus performant que Trident, notament au niveau de son moteur JS. D&#8217;apres certains bench, ils serait aussi bien plus performant que Chrome et FF (Gecko et Webkit ?) en ce qui concerne le WebGL</em></p>\n<h3>layers</h3>\n<ul>\n<li><strong>user interface</strong>: c&#8217;est plutot parlant</li>\n<li><strong>browser engine</strong>: couche entre les actions liées à l&#8217;UI et le moteur de rendu</li>\n<li><strong>rendering engine</strong>: responsable d&#8217;afficher ce qui a été requeté</li>\n<li><strong>networking</strong>: plutot causant aussi</li>\n<li><strong>UI backend</strong>: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.</li>\n<li><strong>JS interpreter</strong>: parse &amp; exec js</li>\n<li><strong>Data storage</strong>: persistant. Cookies, localStorage, IndexedDB, WebSQL et FileSystem</li>\n</ul>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/layers.png\" alt=\"browser components\" /></p>\n<h3>rendering engine (aussi appelé layout engine)</h3>\n<p>Plusieurs moteurs : Trident (IE), Gecko (FF), Webkit (Safari), Blink &#8211; fork de Webkit et open source(Chrome et Opera), EdgeHTML &#8211; fork de Trident (Edge) (qui date d&#8217;une Tecnical preview de Win10 dans IE11).</p>\n<p><em>note: EdgeHTML est plus performant que Trident, notament au niveau de son moteur JS. D&#8217;apres certains bench, ils serait aussi bien plus performant que Chrome et FF (Gecko et Webkit ?) en ce qui concerne le WebGL</em></p>\n<p>##JS engine<br />\n<em>note: ne pas oublier de causer des moteurs js. Chakra est un fork de JSript engine utilisé dans IE</em><br />\nV8 utilisé par chrome (donc par Blink)<br />\nspidermonkey (celui utilisé par FF &#8211; gecko) (premier jsengine, créée par <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> à Netscape<br />\nNitro pour Webkit<br />\nIl en existe d&#8217;autres : https://en.wikipedia.org/wiki/JavaScript_engine</p>\n<h3>main flow</h3>\n<p>Networking layer envoie les données à afficher au rendering engine (généralement par des chunks de 8kB).</p>\n<p>Steps :<br />\n&#8211; Parsing HTML (output DOM tree)<br />\n&#8211; render tree<br />\n&#8211; layout du tree rendu<br />\n&#8211; painting le tree rendu</p>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/webkitflow.png\" alt=\"Webkit main flow\" /></p>\n<p>###Parsing<br />\nParser le HTML revient à convertir les elements en des DOM nodes ce qui construit un arbre appelé &#8220;content tree&#8221;. Il y a aussi un parsage des données CSS (ce qui resulte en Style Rules). Le DOM tree et les style rules sont ensuite combinés pour former le <strong>render tree</strong>.</p>\n<p>HTML to DOM tree<br />\nCSS to CSSOM tree</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Hello World\n    &lt;/p&gt;\n    &lt;div&gt; &lt;img src=\"example.png\"/&gt;&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/image015.png\" alt=\"enter image description here\" /></p>\n<p>c&#8217;est là que la tolerance apparait : <code>&lt;/br&gt;</code> à la place de <code>&lt;br&gt;</code> etc</p>\n<p>####CSS pour CASCADING StyleSheet<br />\nqu&#8217;est-ce que la cascade en css ? https://www.w3.org/TR/CSS2/cascade.html</p>\n<p>Browser declarations<br />\nUser normal declarations<br />\nAuthor normal declarations<br />\nAuthor important declarations<br />\nUser important declarations</p>\n<p><strong>specificity</strong><br />\nA selector&#8217;s specificity is calculated as follows:</p>\n<p>count 1 if the declaration is from is a &#8216;style&#8217; attribute rather than a rule with a selector, 0 otherwise (= a) (In HTML, values of an element&#8217;s &#8220;style&#8221; attribute are style sheet rules. These rules have no selectors, so a=1, b=0, c=0, and d=0.)<br />\ncount the number of ID attributes in the selector (= b)<br />\ncount the number of other attributes and pseudo-classes in the selector (= c)<br />\ncount the number of element names and pseudo-elements in the selector (= d)<br />\nThe specificity is based only on the form of the selector. In particular, a selector of the form &#8220;[id=p33]&#8221; is counted as an attribute selector (a=0, b=0, c=1, d=0), even if the id attribute is defined as an &#8220;ID&#8221; in the source document&#8217;s DTD.</p>\n<p>Concatenating the four numbers a-b-c-d (in a number system with a large base) gives the specificity.</p>\n<p>Some examples:</p>\n<pre><code class=\"language-css\"> *             {}  /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */\n li            {}  /* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */\n li:first-line {}  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */\n ul li         {}  /* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */\n ul ol+li      {}  /* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */\n h2 + *[rel=up]{}  /* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */\n ul ol li.red  {}  /* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */\n li.red.level  {}  /* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */\n #x34y         {}  /* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */\n style=\"\"          /* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */\n</code></pre>\n<hr />\n<h4>Render tree</h4>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png\" alt=\"enter image description here\" /><br />\n<em>https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=fr</em></p>\n<p>To construct the render tree, the browser roughly does the following:</p>\n<ul>\n<li>Starting at the root of the DOM tree, traverse each visible node.\n<ul>\n<li>Some nodes are not visible at all (e.g. script tags, meta tags, and so on), and are omitted since they are not reflected in the rendered output.</li>\n<li>Some nodes are hidden via CSS and are also omitted from the render tree &#8211; e.g. the span node in example above is missing from the render tree because we have an explicit rule that sets “display: none” property on it.</li>\n</ul>\n</li>\n<li>For each visible node find the appropriate matching CSSOM rules and apply them.</li>\n<li>Emit visible nodes with content and their computed styles.<br />\nRemember</li>\n</ul>\n<p>As a brief aside, note that &#8216;visibility: hidden&#8217; is different from &#8216;display: none&#8217;. The former makes the element invisible, but the element still occupies space in the layout (i.e. it&#8217;s rendered as an empty box), whereas the latter (display: none) removes the element entirely from the render tree such that the element is invisible and is not part of layout.</p>\n<p>###Layout stage (or reflow stage)</p>\n<p>A cet instant, on sait quels nodes sont visibles et on a leur computed styles. Cependant, la position et la taille dans le viewport n&#8217;a pas encore été calculé.</p>\n<p>Pour définir la taille et la position de chaque objet, le navigateur va partir de la racine du render tree et calculer pour cahque node.</p>\n<p>output du layout process = <strong>box model</strong> qui contient toutes les infos de position et de taille par rapport au viewport convertis en pixel de maniere absolu sur l&#8217;écran.</p>\n<p>c&#8217;est quoi un renderer = node du render tree ?<br />\nPour ne pas avoir a tout layout pour un petit changement, les browser utilises une mecaniques appelées <code>dirty bit</code>. Quand un renderer change et ou est ajouté, il se marque lui et ses enfants comment <code>dirty</code>. Il existe 2 flags : <code>dirty</code> et <code>children are dirty</code>. Si le <code>renderer</code> lui meme est ok, c&#8217;est le 1nd</p>\n<p>Le process entié (appelé global layout) peut etre trigger is un changement de style affecte tout le rendu, comme la taille d&#8217;une font qui change ou si le viewprt est resized.</p>\n<p><em>note optimisation: un element determine sa size en fonction des marge, padding, border (si box-sizing sur border box) et de la taille de son parent. Donc changer la widh d&#8217;un parent le checkera comme dirty est un process layout serea trigger. Si vous utilisez scale(), seules les proportions changent et il n&#8217;y a pas besoin de recalculer tous les enfants.</em></p>\n<h4>Painting ou rasterizing</h4>\n<p>by GPU (important pour la part2 du post)</p>\n<p>Maintenant que l&#8217;on sait quels nodes sont visibles ou non, leur computed stules et la géométrie, ces infos sont passées à la derniere etape qui va reboucler sur le render tree en partant de la root pour convertir chaque ndoe en pixel sur l&#8217;écran.</p>\n<p>derniere etape de ça :</p>\n<p>tout le boulot de opacity, transform etc est sub de painting et s&#8217;appelle composite layer</p>\n<h3>?</h3>\n<p>ces étapes ne s&#8217;executent pas de maniere complete sequentielle. Par exemple, le render tree commence à etre construit pendant que le DOM tree est en construction.<br />\nLe browser n&#8217;attendra pas que le DOM tree soit complet pour pouvoir commencer à rendre ce qui doit etre visible dans le viewport. (mais dans ce cas, si un truc est tout en bas ? Il apparait un peu plus tard ?)</p>\n<p>##Utilité ?</p>\n<p>Culture général + debug dans chrome devtools par exemple quand on fait de l&#8217;animation (ou qu&#8217;on scroll avec la souris), ce processus est répété de nouveau. Pour ca que transform c&#8217;est bien et que let,top,bottom,top ca pue.<br />\ntransform modifie la position et ne nécessite pas de recalcule<br />\n+ http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/<br />\npar contre effet de pixel snapping https://dcurt.is/pixel-fitting</p>\n<p>transform utiliser le GPU<br />\nThe top/left has very large time to paint each frame, which results in a choppier transition. All the CSS including some big box shadows, are computed on the CPU and composited against that gradient backdrop every frame. The translate version, on the other hand, gets the laptop element elevated onto it’s own layer on the GPU (called a RenderLayer). Now that it sits on its own layer, any 2D transform, 3D transform, or opacity changes can happen purely on the GPU which will stay extremely fast and still get us quick frame rates.</p>\n<p>Guidelines for animation</p>\n<ul>\n<li>Use CSS keyframe animation or CSS transitions, if at all possible. The browser can optimize painting and compositing bigtime here.</li>\n<li>If needs to be it’s JS-based animation, use requestAnimationFrame. Avoid setTimeout, setInterval.</li>\n<li>Avoid changing inline styles on every frame (jQuery animate()-style) if you can, declarative animations in CSS can be optimized by the browser way more.</li>\n<li>Using 2D transforms instead of absolute positioning will typically provide better FPS by way of smaller paint times and smoother animation.</li>\n<li>Use Timeline Frame’s mode to investigate what is slowing down your behavior</li>\n<li>“Show Paint Rects” and “Render Composited Layer Borders” are good pro-moves to verify where your element is being rendered.</li>\n</ul>\n<p><strong>optimisations (faire un 2eme post pour causer de ça, seulement).</strong>:</p>\n<p>@TODO<br />\nhttp://www.html5rocks.com/en/tutorials/speed/high-performance-animations/<br />\nThe higher up you start on the timeline waterfall the more work the browser has to do to get pixels on to the screen.<br />\n=> il faut éviter de repasser par cette boucle infernale, c&#8217;est pour ça que composite layer fait pas chier</p>\n<p>savoir quoi fait quoi : https://docs.google.com/spreadsheets/d/1Hvi0nu2wG3oQ51XRHtMv-A_ZlidnwUYwgQsPQUg1R2s/pub?single=true&amp;gid=0&amp;output=html</p>\n<p>si on anime une de ces properiete qui a PAINT : c&#8217;est fait par le GPU donc sur mobile pas top.</p>\n<p>layers: http://www.html5rocks.com/en/tutorials/speed/layers/<br />\ncreer trop de layer ca peut crainder: http://wesleyhales.com/blog/2013/10/26/Jank-Busting-Apples-Home-Page/</p>\n"
    },
    "excerpt": {
      "rendered": "<p>test</p>\n"
    },
    "author": 1,
    "featured_media": 12,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      2
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/38"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=38"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/38/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/12"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=38"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=38"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=38"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 36,
    "date": "2016-09-13T14:20:37",
    "date_gmt": "2016-09-13T14:20:37",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=36"
    },
    "modified": "2016-09-13T14:24:24",
    "modified_gmt": "2016-09-13T14:24:24",
    "slug": "tytyuyi",
    "type": "post",
    "link": "http://localhost/lazycoding-back/tytyuyi/",
    "title": {
      "rendered": "tytyuyi"
    },
    "content": {
      "rendered": "<p>rtytyu</p>\n"
    },
    "excerpt": {
      "rendered": "<p>rtytyu</p>\n"
    },
    "author": 1,
    "featured_media": 12,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      5,
      3
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/36"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=36"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/36/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/12"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=36"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=36"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=36"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 34,
    "date": "2016-09-13T14:20:23",
    "date_gmt": "2016-09-13T14:20:23",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=34"
    },
    "modified": "2016-09-13T14:24:31",
    "modified_gmt": "2016-09-13T14:24:31",
    "slug": "csvddfbbgf",
    "type": "post",
    "link": "http://localhost/lazycoding-back/csvddfbbgf/",
    "title": {
      "rendered": "csvddfbbgf"
    },
    "content": {
      "rendered": "<p>sdvdb</p>\n"
    },
    "excerpt": {
      "rendered": "<p>sdvdb</p>\n"
    },
    "author": 1,
    "featured_media": 12,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      6,
      4
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/34"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=34"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/34/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/12"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=34"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=34"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=34"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 32,
    "date": "2016-09-13T14:20:08",
    "date_gmt": "2016-09-13T14:20:08",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=32"
    },
    "modified": "2016-09-13T14:24:35",
    "modified_gmt": "2016-09-13T14:24:35",
    "slug": "hhhhhhhhhhhhh",
    "type": "post",
    "link": "http://localhost/lazycoding-back/hhhhhhhhhhhhh/",
    "title": {
      "rendered": "hhhhhhhhhhhhh"
    },
    "content": {
      "rendered": "<p>hhh</p>\n"
    },
    "excerpt": {
      "rendered": "<p>hhh</p>\n"
    },
    "author": 1,
    "featured_media": 9,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      2
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/32"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=32"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/32/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/9"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=32"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=32"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=32"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 30,
    "date": "2016-09-13T14:19:53",
    "date_gmt": "2016-09-13T14:19:53",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=30"
    },
    "modified": "2016-09-13T14:24:41",
    "modified_gmt": "2016-09-13T14:24:41",
    "slug": "tnntnt",
    "type": "post",
    "link": "http://localhost/lazycoding-back/tnntnt/",
    "title": {
      "rendered": "tnntnt"
    },
    "content": {
      "rendered": "<p>ntntn</p>\n"
    },
    "excerpt": {
      "rendered": "<p>ntntn</p>\n"
    },
    "author": 1,
    "featured_media": 7,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      5,
      3,
      2,
      6
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/30"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=30"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/30/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/7"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=30"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=30"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=30"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 28,
    "date": "2016-09-13T14:19:39",
    "date_gmt": "2016-09-13T14:19:39",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=28"
    },
    "modified": "2016-09-13T14:24:47",
    "modified_gmt": "2016-09-13T14:24:47",
    "slug": "kyukyumhj",
    "type": "post",
    "link": "http://localhost/lazycoding-back/kyukyumhj/",
    "title": {
      "rendered": "kyukyumhj"
    },
    "content": {
      "rendered": "<p>kyuhmj</p>\n"
    },
    "excerpt": {
      "rendered": "<p>kyuhmj</p>\n"
    },
    "author": 1,
    "featured_media": 7,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      2,
      4
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/28"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=28"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/28/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/7"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=28"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=28"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=28"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 26,
    "date": "2016-09-13T14:19:25",
    "date_gmt": "2016-09-13T14:19:25",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=26"
    },
    "modified": "2016-09-13T14:24:52",
    "modified_gmt": "2016-09-13T14:24:52",
    "slug": "egrreg",
    "type": "post",
    "link": "http://localhost/lazycoding-back/egrreg/",
    "title": {
      "rendered": "egrreg"
    },
    "content": {
      "rendered": "<p>geregr</p>\n"
    },
    "excerpt": {
      "rendered": "<p>geregr</p>\n"
    },
    "author": 1,
    "featured_media": 16,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      5
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/26"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=26"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/26/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/16"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=26"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=26"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=26"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 24,
    "date": "2016-09-13T14:19:14",
    "date_gmt": "2016-09-13T14:19:14",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=24"
    },
    "modified": "2016-09-13T14:24:57",
    "modified_gmt": "2016-09-13T14:24:57",
    "slug": "qwe",
    "type": "post",
    "link": "http://localhost/lazycoding-back/qwe/",
    "title": {
      "rendered": "qwe"
    },
    "content": {
      "rendered": "<p>qwe</p>\n"
    },
    "excerpt": {
      "rendered": "<p>qwe</p>\n"
    },
    "author": 1,
    "featured_media": 9,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      3,
      2,
      6
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/24"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=24"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/24/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/9"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=24"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=24"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=24"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 22,
    "date": "2016-09-13T14:19:02",
    "date_gmt": "2016-09-13T14:19:02",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=22"
    },
    "modified": "2016-09-13T14:25:02",
    "modified_gmt": "2016-09-13T14:25:02",
    "slug": "new-post",
    "type": "post",
    "link": "http://localhost/lazycoding-back/new-post/",
    "title": {
      "rendered": "new post"
    },
    "content": {
      "rendered": "<p>qweqweqwe</p>\n"
    },
    "excerpt": {
      "rendered": "<p>qweqweqwe</p>\n"
    },
    "author": 1,
    "featured_media": 12,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      4
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/22"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=22"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/22/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/12"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=22"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=22"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=22"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 14,
    "date": "2016-08-28T07:43:03",
    "date_gmt": "2016-08-28T07:43:03",
    "guid": {
      "rendered": "http://localhost/lazycoding-back/?p=14"
    },
    "modified": "2016-08-28T07:43:03",
    "modified_gmt": "2016-08-28T07:43:03",
    "slug": "lolilol",
    "type": "post",
    "link": "http://localhost/lazycoding-back/lolilol/",
    "title": {
      "rendered": "Lolilol !"
    },
    "content": {
      "rendered": "<p>zaer</p>\n"
    },
    "excerpt": {
      "rendered": "<p>zaer</p>\n"
    },
    "author": 1,
    "featured_media": 7,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "format": "standard",
    "categories": [
      2,
      6
    ],
    "tags": [],
    "custom_cover": "assets/mock-data/geralt.jpg",
    "_links": {
      "self": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/14"
        }
      ],
      "collection": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/comments?post=14"
        }
      ],
      "version-history": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/posts/14/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media/7"
        }
      ],
      "wp:attachment": [
        {
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/media?parent=14"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/categories?post=14"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "http://localhost/lazycoding-back/wp-json/wp/v2/tags?post=14"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]
